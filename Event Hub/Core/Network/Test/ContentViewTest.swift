//
//  ContentViewTest.swift
//  Event Hub
//
//  Created by Aleksandr Meshchenko on 09.09.25.
//

import SwiftUI

struct ContentViewTest: View {
    @Environment(\.managedObjectContext) private var viewContext
    @EnvironmentObject var authManager: AuthenticationManager
    @Environment(\.colorScheme) private var colorScheme
    @State private var logText: String = ""
    
    var body: some View {
        NavigationView {
            VStack(spacing: 12) {
                Button { authManager.signOut() } label: {
                    Text("Sign Out")
                        .font(.headline)
                        .foregroundColor(colorScheme == .dark ? Color(red: 0.1, green: 0.1, blue: 0.1) : .black)
                        .frame(maxWidth: .infinity, minHeight: 50)
                        .background(.thinMaterial)
                        .clipShape(RoundedRectangle(cornerRadius: 8))
                        .padding(.horizontal, 20)
                }
                
                NavigationLink("Open Networking Probe") {
                    NetworkingProbeView()
                }
                .buttonStyle(.borderedProminent)
                .padding(.horizontal, 20)
                
                Button("Test Locations") {
                    Task {
                        logText = "Loading locations...\n"
                        do {
                            let service = LocationService()
                            let locations = try await service.fetchLocations()
                            logText += "üìç Loaded \(locations.count) locations:\n"
                            for loc in locations {
                                logText += "  - \(loc.name) (\(loc.slug))\n"
                            }
                        } catch {
                            logText += "‚ùå Location error: \(error)\n"
                        }
                    }
                }
                .buttonStyle(.bordered)
                .padding(.horizontal, 20)
                
                // Endpoint "/places/" –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π (–∫–∞–∫ –∏ "/events/").
                //                –≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≥–æ–¥–∏—Ç—å—Å—è –¥–ª—è:
                //                –ö–∞—Ä—Ç - –ø–æ–∫–∞–∑–∞—Ç—å –º–µ—Å—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
                //                –§–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ - "–°–æ–±—ã—Ç–∏—è —Ä—è–¥–æ–º —Å –º–µ—Ç—Ä–æ –ê–¥–º–∏—Ä–∞–ª—Ç–µ–π—Å–∫–∞—è"
                //                –ù–∞–≤–∏–≥–∞—Ü–∏–∏ - –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç –¥–æ –º–µ—Å—Ç–∞
                Button("Test Places") {
                    Task {
                        logText = "Loading places for SPb...\n"
                        do {
                            
                            let service = PlaceService()
                            let response = try await service.fetchPlaces(
                                location: "spb",
                                pageSize: 10
                            )
                            logText += "üìç Found \(response.count) places total\n"
                            logText += "üìç Showing first \(response.results.count):\n"
                            
                            for place in response.results.prefix(5) {
                                logText += "  - \(place.title)\n"
                                if let address = place.address {
                                    logText += "    üìç \(address)\n"
                                }
                                if let subway = place.subway, !subway.isEmpty {
                                    logText += "    üöá \(subway)\n"
                                }
                            }
                        } catch {
                            logText += "‚ùå Places error: \(error)\n"
                        }
                    }
                }
                .buttonStyle(.bordered)
                .padding(.horizontal, 20)
                
                Button("Test Search") {
                    Task {
                        logText = "–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫...\n"
                        do {
                            let service = SearchService()
                            
                            // –¢–µ—Å—Ç 1: –ü–æ–∏—Å–∫ —Å–æ–±—ã—Ç–∏–π
                            logText += "\nüîç –ü–æ–∏—Å–∫ —Å–æ–±—ã—Ç–∏–π '–∫–æ–Ω—Ü–µ—Ä—Ç':\n"
                            let eventResults = try await service.searchEvents(
                                query: "–∫–æ–Ω—Ü–µ—Ä—Ç",
                                location: "spb"
                            )
                            logText += "  –ù–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: \(eventResults.count)\n"
                            for result in eventResults.results.prefix(3) {
                                logText += "  - \(result.title)\n"
                            }
                            
                            // –¢–µ—Å—Ç 2: –ü–æ–∏—Å–∫ –º–µ—Å—Ç
                            logText += "\nüìç –ü–æ–∏—Å–∫ –º–µ—Å—Ç '–º—É–∑–µ–π':\n"
                            let placeResults = try await service.searchPlaces(
                                query: "–º—É–∑–µ–π",
                                location: "spb"
                            )
                            logText += "  –ù–∞–π–¥–µ–Ω–æ –º–µ—Å—Ç: \(placeResults.count)\n"
                            for result in placeResults.results.prefix(3) {
                                logText += "  - \(result.title)\n"
                            }
                            
                            // –¢–µ—Å—Ç 3: –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫
                            logText += "\nüîé –û–±—â–∏–π –ø–æ–∏—Å–∫ '–≤—ã—Å—Ç–∞–≤–∫–∞':\n"
                            let allResults = try await service.searchAll(
                                query: "–≤—ã—Å—Ç–∞–≤–∫–∞",
                                location: "spb"
                            )
                            logText += "  –í—Å–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: \(allResults.count)\n"
                            let eventCount = allResults.results.filter { $0.ctype == "event" }.count
                            let placeCount = allResults.results.filter { $0.ctype == "place" }.count
                            logText += "  –°–æ–±—ã—Ç–∏—è: \(eventCount), –ú–µ—Å—Ç–∞: \(placeCount)\n"
                            
                        } catch {
                            logText += "‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: \(error)\n"
                        }
                    }
                }
                .buttonStyle(.bordered)
                .padding(.horizontal, 20)
                
                Button("Test Favorites") {
                    Task {
                        logText = "Testing Favorites...\n"
                        
                        let service = FavoritesService()
                        let eventService = EventService()
                        
                        do {
                            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∞
                            logText += "1. Loading event...\n"
                            let events = try await eventService.fetchEvents(
                                location: "spb",
                                dateRange: .next7Days,
                                page: 1,
                                pageSize: 1,
                                categories: nil
                            )
                            
                            guard let event = events.results.first else {
                                logText += "‚ùå No events found\n"
                                return
                            }
                            
                            logText += "‚úÖ Event: \(event.title)\n"
                            
                            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
                            logText += "2. Adding to favorites...\n"
                            try await service.addToFavorites(event)
                            logText += "‚úÖ Added\n"
                            
                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
                            logText += "3. Checking status...\n"
                            let isFav = await service.isFavorite(eventId: event.id)
                            logText += "‚úÖ Is favorite: \(isFav)\n"
                            
                            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ
                            logText += "4. Fetching all favorites...\n"
                            let favorites = try await service.fetchAllFavorites()
                            logText += "‚úÖ Total favorites: \(favorites.count)\n"
                            
                            // –£–¥–∞–ª—è–µ–º –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
//                            logText += "5. Removing from favorites...\n"
//                            try await service.removeFromFavorites(eventId: event.id)
//                            let stillFav = await service.isFavorite(eventId: event.id)
//                            logText += "‚úÖ Removed, is favorite: \(stillFav)\n"
                            
                        } catch {
                            logText += "‚ùå Error: \(error)\n"
                        }
                    }
                }
                .buttonStyle(.bordered)
                .padding(.horizontal, 20)
                
                Button("Show All Favorites") {
                    Task {
                        let service = FavoritesService()
                        let favorites = try await service.fetchAllFavorites()
                        logText = "üìö Favorites in DB: \(favorites.count)\n"
                        for fav in favorites {
                            logText += "- \(fav.title ?? "?")\n"
                        }
                    }
                }
                
                // –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –ª–æ–≥–æ–≤
                ScrollView {
                    Text(logText.isEmpty ? "Logs will appear here..." : logText)
                        .font(.system(.caption, design: .monospaced))
                        .foregroundColor(logText.isEmpty ? .secondary : .primary)
                        .frame(maxWidth: .infinity, alignment: .leading)
                        .padding()
                }
                .frame(maxHeight: 200)
                .background(Color(.systemGray6))
                .cornerRadius(8)
                .padding(.horizontal, 20)
                
                Spacer()
            }
            .navigationTitle("Home")
        }
    }
}
